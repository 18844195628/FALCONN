  void set_num_probes(int_fast64_t num_probes) {
    inner_entity_->set_num_probes(num_probes);
  }

  int_fast64_t get_num_probes() { return inner_entity_->get_num_probes(); }

  void set_max_num_candidates(int_fast64_t max_num_candidates) {
    return inner_entity_->set_max_num_candidates(max_num_candidates);
  }

  int_fast64_t get_max_num_candidates() {
    return inner_entity_->get_max_num_candidates();
  }

  int32_t find_nearest_neighbor(OuterNumPyArray q) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    return inner_entity_->find_nearest_neighbor(converted_query);
  }

  std::vector<int32_t> find_k_nearest_neighbors(OuterNumPyArray q,
                                                int_fast64_t k) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    std::vector<int32_t> result;
    inner_entity_->find_k_nearest_neighbors(converted_query, k, &result);
    return result;
  }

  std::vector<int32_t> find_near_neighbors(OuterNumPyArray q,
                                           ScalarType threshold) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    std::vector<int32_t> result;
    inner_entity_->find_near_neighbors(converted_query, threshold, &result);
    return result;
  }

  std::vector<int32_t> get_unique_candidates(OuterNumPyArray q) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    std::vector<int32_t> result;
    inner_entity_->get_unique_candidates(converted_query, &result);
    return result;
  }

  std::vector<int32_t> get_candidates_with_duplicates(OuterNumPyArray q) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    std::vector<int32_t> result;
    inner_entity_->get_candidates_with_duplicates(converted_query, &result);
    return result;
  }

  void reset_query_statistics() { inner_entity_->reset_query_statistics(); }

  QueryStatistics get_query_statistics() {
    return inner_entity_->get_query_statistics();
  }
